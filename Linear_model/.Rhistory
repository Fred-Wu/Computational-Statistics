instance$archive$benchmark_result$score()
learner$param_set$values
learner$param_set$values = instance$result_learner_param_vals
learner$param_set
learner$train(task)
learner$predict()
out = learner$train(task)
out$base_learner()
out$importance()
autoplot(out$importance())
out$train()
out$state
out$selected_features()
out$predict(task)
pre = learner$predict(task)
pre$confusion
autoplot(pre)
autoplot(pre, type = "roc")
library(mlr3viz)
autoplot(pre, type = "roc")
library(mlr3viz)
autoplot(pre, type = "roc")
autoplot(pre, type = "prc")
install.packages("precrec")
autoplot(pre, type = "roc")
learner$predict_type
learner$predict_type = "prob"
out = learner$train(task)
pre = learner$predict(task, )
autoplot(pre, type = "roc")
autoplot(pre, type = "prc")
autoplot(pre, type = "roc")
as.data.table(pre)
?add_strata
?tsk
task$data
task$data()
task$add_strata(age)
task$add_strata("age")
task$strata
?rsmp
mlr_resamplings
as.data.table(mlr_resamplings)
hout = rsmp("cv")
hout
hout$param_set
hout$iters
hout = rsmp("cv", iters = 3)
hout = rsmp("cv", folds = 3)
hout
measure = msr("classif.ce")
evals20 = trm("evals", n_evals = 20)
instance = TuningInstanceSingleCrit$new(
task = task,
learner = learner,
resampling = hout,
measure = measure,
search_space = search_space,
terminator = evals20
)
tuner = tnr("grid_search", resolution = 5)
tuner$optimize(instance)
instance$archive
instance$result
instance$result_y
instance$eval_batch()
instance$result_learner_param_vals
instance$assign_result()
instance$archive$data
instance$archive$benchmark_result
instance$archive$learner_param_vals()
instance$archive$learner_param_vals
instance$archive$best()
instance$archive$cols_x
instance$archive$check_values
instance$archive$predictions()
instance$archive$predictions(i=10)
instance$archive$predictions(i=1)
instance$archive$predictions(i=1)[[1]]
instance$archive$predictions(i=1)[[1]][, 3]
instance$archive$predictions(i=1)
as.data.table(instance$archive$predictions(i=1)[[1]])
instance$archive$resample_result()
instance$archive$resample_result(1)
instance$archive$resample_result(2)
instance$archive$resample_result(100)
instance$archive$resample_result(20)
instance$archive$resample_result(1)
as.data.table(instance$archive$resample_result(1))
instance$archive$data
instance$archive$data$x_domain
instance$archive$data$uhash
instance$archive$data$runtime_learners
instance$archive$data$batch_nr
task$truth()
table(task$truth())
instance$archive$cols_x
instance$archive$cols_y
instance$archive$predictions()
instance$archive$predictions(i=1)
instance$archive$data
instance$archive$data
instance$archive$predictions(i=1)
as.data.table(instance$archive$predictions(i=1)[[1]])
test <- as.data.table(instance$archive$predictions(i=1)[[1]])
task$data()
task$data(rows = test$row_ids)
# regression task
task = tsk("boston_housing")
task$data()
# roughly equal size split while stratifying on the binned response
split = partition(task, ratio = 0.5)
split
data = data.frame(
y = c(task$truth(split$train), task$truth(split$test)),
split = rep(c("train", "predict"), lengths(split))
)
data
boxplot(y ~ split, data = data)
# classification task
task = tsk("pima")
split = partition(task)
split
# roughly same distribution of the target label
prop.table(table(task$truth()))
task$truth()
prop.table(table(task$truth(split$train)))
prop.table(table(task$truth(split$test)))
# roughly same distribution of the target label
prop.table(table(task$truth()))
# splitting into 3 disjunct sets, using ResamplingCV and stratification
task = tsk("iris")
task$strata
task$set_col_roles(task$target_names, add_to = "stratum")
task$strata
task$col_info
task$col_roles
task$target_names
prop.table(table(task$truth()))
r = rsmp("cv", folds = 3)$instantiate(task)
r
r$id
r$train_set()
r$train_set(i=1)
r$train_set(i=2)
r$train_set(i=3)
r$train_set(i=4)
r$train_set(i=1)
r$train_set(i=2)
r$train_set(i=3)
r$instance
r$test_set()
r$test_set(i=1)
r$test_set(i=2)
r$test_set(i=3)
r$test_set(i=4)
prop.table(table(task$truth(r$test_set(i=2))))
prop.table(table(task$truth(r$test_set(i=1))))
prop.table(table(task$truth(r$test_set(i=2))))
prop.table(table(task$truth(r$test_set(i=3))))
prop.table(table(task$truth(r$train_set(i=3))))
prop.table(table(task$truth(r$train_set(i=1))))
prop.table(table(task$truth(r$train_set(i=2))))
task$truth()
table(task$truth())
# splitting into 3 disjunct sets, using ResamplingCV and stratification
task = tsk("iris")
r = rsmp("cv", folds = 3)$instantiate(task)
r$train_set(1)
prop.table(table(task$truth(r$train_set(i=1))))
prop.table(table(task$truth(r$train_set(i=2))))
prop.table(table(task$truth(r$train_set(i=3))))
task$strata
task$set_col_roles(task$target_names, add_to = "stratum")
task$strata
prop.table(table(task$truth(r$train_set(i=3))))
r = rsmp("cv", folds = 3)$instantiate(task)
prop.table(table(task$truth(r$train_set(i=3))))
prop.table(table(task$truth(r$test_set(i=3))))
extract_inner_tuning_results(tuner)
mlr_pipeops$get("learner", lrn("classif.rpart"))
mutate = po("mutate")
filter = po("filter",
filter = mlr3filters::flt("variance"),
param_vals = list(filter.frac = 0.5))
library(magrittr)
graph = mutate %>>% filter
graph$edges
graph$plot()
install.packages("igraph")
graph$plot()
install.packages(c("colorspace", "future", "mlr3verse", "tidyselect", "xgboost", "yaml"))
install.packages("BH")
library("BH")
library(help = "BH")
Rcpp::sourceCpp("Documents/Studies/Cpp/Rcpp/rcppSim.cpp")
computeGCD(6, 2)
computeGCD(6, 3)
Rcpp::sourceCpp("Documents/Studies/Cpp/Rcpp/rcppSim.cpp")
Rcpp::sourceCpp("Documents/Studies/Cpp/Rcpp/rcppSim.cpp")
computeGCD(5, 6)
computeGCD(6, 2)
computeGCD(6, 4)
Rcpp::sourceCpp("Documents/Studies/Cpp/Rcpp/rcppSim.cpp")
roll_die(1, 5)
roll_die(1, 5)
roll_die(1, 5)
roll_die(1, 5)
roll_die(1, 5)
roll_die(1, 5)
roll_die(1, 5)
roll_die(1, 5)
roll_die(1, 5)
roll_die(1, 5)
roll_die(1, 5)
roll_die(1, 5)
roll_die(1, 5)
roll_die(1, 5)
roll_die(1, 5)
roll_die(1, 5)
Rcpp::sourceCpp("Documents/Studies/Cpp/Rcpp/rcppSim.cpp")
roll_die(1, 5)
roll_die(1, 6)
roll_die(1, 6)
roll_die(1, 6)
roll_die(1, 6)
roll_die(1, 6)
roll_die(1, 6)
roll_die(1, 6)
roll_die(1, 6)
roll_die(1, 6)
roll_die(1, 6)
roll_die(1, 6)
roll_die(1, 6)
roll_die(1,2)
roll_die(1,2)
roll_die(1,2)
roll_die(1,2)
roll_die(1,2)
roll_die(1,2)
roll_die(1,2)
roll_die(1,2)
roll_die(1,2)
roll_die(1,2)
roll_die(1, 4)
roll_die(1, 4)
roll_die(1, 4)
roll_die(1, 4)
roll_die(1, 4)
roll_die(1, 4)
roll_die(1, 4)
roll_die(1, 4)
roll_die(1, 4)
roll_die(1, 4)
roll_die(1, 4)
roll_die(1, 4)
roll_die(1, 4)
roll_die(1, 4)
roll_die(1, 4)
roll_die(1, 4)
roll_die(1, 4)
roll_die(1, 4)
roll_die(1, 4)
Rcpp::sourceCpp("Documents/Studies/Cpp/Rcpp/rcppSim.cpp")
roll_die()
roll_die()
roll_die()
roll_die()
roll_die()
roll_die()
roll_die()
roll_die()
roll_die()
roll_die()
roll_die()
roll_die()
roll_die()
roll_die()
roll_die()
roll_die()
roll_die()
roll_die()
roll_die()
roll_die()
roll_die()
roll_die()
roll_die()
roll_die()
roll_die()
roll_die()
roll_die()
roll_die()
roll_die()
roll_die()
roll_die()
roll_die()
roll_die()
roll_die()
roll_die()
roll_die()
Rcpp::sourceCpp("Documents/Studies/Cpp/Rcpp/rcppSim.cpp")
roll_die()
roll_die()
roll_die()
Rcpp::sourceCpp("Documents/Studies/Cpp/Rcpp/rcppSim.cpp")
roll_die()
roll_die()
roll_die()
roll_die()
roll_die()
roll_die()
roll_die()
roll_die()
roll_die()
roll_die()
roll_die()
roll_die()
roll_die()
roll_die()
roll_die()
roll_die()
roll_die()
roll_die()
roll_die()
roll_die()
roll_die()
roll_die()
roll_die()
roll_die()
roll_die()
roll_die()
roll_die()
roll_die()
roll_die()
Rcpp::sourceCpp("Documents/Studies/Cpp/Rcpp/rcppSim.cpp")
roll_die()
roll_die()
roll_die()
roll_die()
roll_die()
roll_die()
roll_die()
roll_die()
roll_die()
roll_die()
roll_die()
roll_die()
roll_die()
roll_die()
roll_die()
roll_die()
roll_die()
Rcpp::sourceCpp("Documents/Studies/Cpp/Rcpp/rcppSim.cpp")
roll_die(0, 2)
roll_die(0, 2)
roll_die(0, 2)
roll_die(0, 2)
roll_die(0, 2)
roll_die(0, 2)
roll_die(0, 2)
roll_die(0, 2)
roll_die(0, 2)
roll_die(0, 2)
roll_die(0, 2)
roll_die(0, 2)
roll_die(0, 2)
roll_die(1, 18)
roll_die(1, 18)
roll_die(1, 18)
roll_die(1, 18)
roll_die(1, 18)
roll_die(1, 18)
roll_die(1, 18)
roll_die(1, 18)
roll_die(1, 18)
roll_die(1, 18)
library(BH)
install.packages(c("bbotk", "clipr", "distr6", "glue", "jsonlite", "mgcv", "mlr3tuning"))
install.packages(c("mlr3", "survival"))
install.packages(c("openssl", "rmarkdown", "xfun"))
library(mlr3verse)
?partition
task = tsk("iris")
task$set_col_roles(task$target_names, add_to = "stratum")
r = rsmp("cv", folds = 3)$instantiate(task)
r
task = tsk("iris")
task$set_col_roles(task$target_names, add_to = "stratum")
r = rsmp("cv", folds = 1)$instantiate(task)
task = tsk("iris")
task$set_col_roles(task$target_names, add_to = "stratum")
r = rsmp("cv", folds = 2)$instantiate(task)
r
sets = lapply(1:3, r$train_set)
sets = lapply(1:2, r$train_set)
sets
sets[[1]] %*% sets[[2]]
sets[[1]] %in% sets[[2]]
task_gc = tsk("german_credit")
task_gc$
col_roles()
col_roles
task_gc = tsk("german_credit")
task_gc$col_roles
task_gc$col_roles$stratum = c("credit_risk", "housing", "telephone")
task_gc$col_roles
cv2 = rsmp("cv", folds = 2)
split <- cv2$instantiate(task_gc)
split
split$instance
dt = merge(cv3$instance, task_gc$data()[, row_id := .I], by = "row_id")
dt[, .(class_ratio = sum(credit_risk == "bad") /
sum(credit_risk == "good")), by = fold
dt = merge(cv2$instance, task_gc$data()[, row_id := .I], by = "row_id")
dt[, .(class_ratio = sum(credit_risk == "bad") /
sum(credit_risk == "good")), by = fold]
dt = merge(cv2$instance, task_gc$data()[, row_id := .I], by = "row_id")
dt = dt[, .(freq = .N), by = list(fold, credit_risk, housing, telephone)]
dt
dt = dcast(dt, credit_risk + housing + telephone ~ fold)
dt[, c(3:5) := lapply(.SD, function(x) x / sum(x)), .SDcols = 3:5]
dt
dt = dcast(dt, credit_risk + housing + telephone ~ fold)
dt = data.table::dcast(dt, credit_risk + housing + telephone ~ fold)
library(data.table)
dt = dcast(dt, credit_risk + housing + telephone ~ fold)
dt
dt = merge(cv2$instance, task_gc$data()[, row_id := .I], by = "row_id")
dt = dt[, .(freq = .N), by = list(fold, credit_risk, housing, telephone)]
dt
dt = dcast(dt, credit_risk + housing + telephone ~ fold)
dt
dt[, c(3:4) := lapply(.SD, function(x) x / sum(x)), .SDcols = 4:5]
dt
mlr_resamplings
?rsmp
as.data.table(mlr_resamplings)
ho = rsmp("Holdout", ratio = 0.8)
ho = rsmp("holdout", ratio = 0.8)
ho
split = ho$instantiate(task_tc)
split = ho$instantiate(task_gc)
split
split$instance
dt = merge(cv2$instance, task_gc$data()[, row_id := .I], by = "row_id")
dt = dt[, .(freq = .N), by = list(fold, credit_risk, housing, telephone)]
dt
dt = merge(ho$instance, task_gc$data()[, row_id := .I], by = "row_id")
dt = dt[, .(freq = .N), by = list(fold, credit_risk, housing, telephone)]
train <- task_gc$data(rows = split$instance$train)
train
train[, .(credit_risk, housing, telephone)]
table(train[, .(credit_risk, housing, telephone)])
dt = merge(ho$instance, task_gc$data()[, row_id := .I], by = "row_id")
dt = dt[, .(freq = .N), by = list(fold, credit_risk, housing, telephone)]
dt = merge(ho$instance$train, task_gc$data()[, row_id := .I], by = "row_id")
dt = dt[, .(freq = .N), by = list(fold, credit_risk, housing, telephone)]
dt = merge(ho$instance$train, task_gc$data()[, row_id := ho$instance$train], by = "row_id")
dt = dt[, .(freq = .N), by = list(fold, credit_risk, housing, telephone)]
ho$instance$train
dt = merge(ho$instance$train, task_gc$data()[, row_id := ho$instance$train], by = "row_id")
dt = merge(ho$instance$train, task_gc$data()[ho$instance$train, row_id:=ho$instance$train], by = "row_id")
train
train = train[, .(freq = .N), by = list(fold, credit_risk, housing, telephone)]
train = train[, .(freq = .N), by = list(credit_risk, housing, telephone)]
train
test <- task_gc$data(rows = ho$instance$test)
test
test <- test[, .(credit_risk, housing, telephone)]
test
test = test[, .(freq = .N), by = list(fold, credit_risk, housing, telephone)]
test = test[, .(freq = .N), by = list(credit_risk, housing, telephone)]
test
setnames(train, "freq", "freq1")
setnames(test, "freq", "freq2")
train
test
testing <- cbind(train$freq1, test$freq2)
testing
apply(testing, 2, function(x) x/sum(x))
train
task_gc$data()
?tsk
?partition
task = tsk("boston_housing")
split = partition(task, ratio = 0.5)
split
ho$initialize(task_gc)
ho$initialize()
ho$instantiate(task_gc)
ho
ho$train_set()
ho$task_nrow
split=ho$instantiate(task_gc)
split
ho
ho = rsmp('holdout', ratio = 0.8)
split = ho$instantiate(task_gc)
split
task_gc$col_roles
split = ho$instantiate(task_gc)
split$instance
split$instance
split2 = partition(task, ratio = 0.5)
split2
library(rmarkdown)
library(tinytex)
install_tinytex()
install.packages(c("survival", "withr"))
install.packages("pandoc")
Sys.getenv("RSTUDIO_PANDOC")
setwd("~/Documents/Studies/Computational Statistics/Linear_model")
